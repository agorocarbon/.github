name: Nodejs code check
on:
  push:
    branches-ignore:
      - main
      - master
  pull_request:
    types:
      - opened
      - synchronize
  pull_request_target:
    types:
      - closed
      
jobs:
  tests:
    name: Unit Tests
    environment: Testing
    env:
      TEST_TYPE: cov
    runs-on: [self-hosted, linux, testing]
    container:
      image: node:14
    defaults:
      run:
        shell: bash
    services:
      mongo:
        image: mongo:4.4.7
        ports:
        - 27017:27017
      postgres:
        image: postgres:9.6.2-alpine
        ports:
        - 5432:5432
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: ${{ secrets.DB_PASSWORD }}
          POSTGRES_DB: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      zookeeper:
        image: confluentinc/cp-zookeeper:latest
        ports:
        - 2181:2181
        env:
          ZOOKEEPER_CLIENT_PORT: 2181
          ZOOKEEPER_TICK_TIME: 2000
      kafka:
        image: confluentinc/cp-kafka:latest
        ports:
        - 29092:29092
        env:
          KAFKA_BROKER_ID: 1
          KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
          KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://kafka:29092
          KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
          KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
          KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    steps:
    - name: Get Code
      uses: actions/checkout@v2

    - name: Get yarn cache directory path
      run: echo "YARN_CACHE_DIR=$(yarn cache dir)" >> $GITHUB_ENV

    - name: Cache node modules
      id: yarn-cache
      uses: actions/cache@v2
      with:
        path: ${{ env.YARN_CACHE_DIR }}
        key: ${{ github.repository }}-${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          ${{ github.repository }}-${{ runner.os }}-yarn-

    - name: Check Service Availability
      run: |
        DEBIAN_FRONTEND=noninteractive apt-get update && apt-get -y install netcat-openbsd
        timeout 20 bash -c 'until printf "" 2>>/dev/null >>/dev/tcp/$0/$1; do sleep 1; done' postgres 5432
        timeout 20 bash -c 'until printf "" 2>>/dev/null >>/dev/tcp/$0/$1; do sleep 1; done' mongo 27017
        timeout 20 bash -c 'until printf "" 2>>/dev/null >>/dev/tcp/$0/$1; do sleep 1; done'  zookeeper 2181
        timeout 60 bash -c 'until printf "" 2>>/dev/null >>/dev/tcp/$0/$1; do sleep 1; done'  kafka 29092

    - name: All Secrets to env
      uses: Firenza/secrets-to-env@v1.1.0
      with:
        secrets: ${{ toJSON(secrets) }}

    - name: Install node dependencies
      run: yarn install --frozen-lockfile

    - name: 'Run Unit Tests'
      run: |
        if [[ ${{ github.event_type }} != 'workflow_call' ]]
        then
          test_type=${{ env.TEST_TYPE }}
        else
          test_type=${{ input.TEST_TYPE }}
        fi
        yarn run test:${test_type} --maxWorkers=2

    - name: SonarCloud Scan
      uses: sonarsource/sonarcloud-github-action@master
      continue-on-error: true

  name: Scan Image
  runs-on: ubuntu-latest
  steps:
    - name: Scan Image for Security
      image: docker
      id: security-scan
      uses: azure/container-scan@v0
      with:
        image-name: ${{ secrets.REGISTRY }}/${{ secrets.IMAGE_NAME }}:${{ github.sha }}
      continue-on-error: true

    - name: Format scan output
      run: |
        pip3 install json2html
        python3 agorocarbon/.github/convert2html.py ${{ steps.security-scan.outputs.scan-report-path }} > ${{ github.workspace }}/scan.html

    - name: Read Scan result html
      if: input.PULL_REQUEST
      id: package
      uses: juliangruber/read-file-action@v1
      with:
        path: ${{ github.workspace }}/scan.html

    - name: Post Scan Results to PR
      if: input.PULL_REQUEST
      uses: actions/github-script@v5.0.0
      env:
        SCAN: ${{ steps.package.outputs.content }}
        RESULT: ${{ steps.security-scan.outcome }}
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: process.env.SCAN
          })
          github.rest.issues.addLabels({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            labels: ["Security:".concat(process.env.RESULT)]
          })
